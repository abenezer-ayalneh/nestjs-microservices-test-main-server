syntax = "proto3";

package user;

import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

service UserGrpcService {
  rpc StoreUser (StoreUserRequest) returns (StoreUserReturn) {}
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReturn) {}
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReturn) {}
  rpc CreateRole (CreateRoleRequest) returns (CreateRoleReturn) {}
  rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleReturn) {}
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleReturn) {}
  rpc GetRoles (GetRolesRequest) returns (GetRolesReturn) {}
  rpc CreatePermission (CreatePermissionRequest) returns (CreatePermissionReturn) {}
  rpc UpdatePermission (UpdatePermissionRequest) returns (UpdatePermissionReturn) {}
  rpc DeletePermission (DeletePermissionRequest) returns (DeletePermissionReturn) {}
  rpc GetPermissions (GetPermissionsRequest) returns (GetPermissionsReturn) {}
  rpc AssignPermissionsToRole (AssignPermissionsToRoleRequest) returns (AssignPermissionsToRoleReturn) {}
  rpc AssignRolesToUser (AssignRolesToUserRequest) returns (AssignRolesToUserReturn) {}
  rpc AssignPermissionsToUser (AssignPermissionsToUserRequest) returns (AssignPermissionsToUserReturn) {}
  rpc UserHasPermissions (UserHasPermissionsRequest) returns (UserHasPermissionsReturn) {}
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesReturn) {}
  rpc GetUserPermissions (GetUserPermissionsRequest) returns (GetUserPermissionsReturn) {}
  rpc RevokeRolesFromUser (RevokeRolesFromUserRequest) returns (RevokeRolesFromUserReturn) {}
  rpc RevokePermissionsFromUser (RevokePermissionsFromUserRequest) returns (RevokePermissionsFromUserReturn) {}
  rpc GetUsersViaRoles (GetUsersViaRolesRequest) returns (GetUsersViaRolesReturn) {}
  rpc GetUsersViaPermissions (GetUsersViaPermissionsRequest) returns (GetUsersViaPermissionsReturn) {}
}

// Get users via permissions
message GetUsersViaPermissionsRequest{
  repeated string permissions = 1;
}

message GetUsersViaPermissionsReturn {
  repeated UserMap users = 1;
}

// Get users via roles
message GetUsersViaRolesRequest{
  repeated string roles = 1;
}

message GetUsersViaRolesReturn {
  repeated UserMap users = 1;
}

message UserMap {
  string id = 1;
  string name = 2;
  string email = 3;
  string email_verified_at = 4;
  string password = 5;
  int32 plan = 6;
  string plan_expire_date = 7;
  int32 requested_plan = 8;
  string type = 9;
  string avatar = 10;
  string lang = 11;
  string mode = 12;
  int32 created_by = 13;
  int32 default_pipeline = 14;
  int32 delete_status = 15;
  bool is_active = 16;
  string remember_token = 17;
  string last_login_at = 18;
  string created_at = 19;
  string updated_at = 20;
  int32 active_status = 21;
  int32 dark_mode = 22;
  string messenger_color = 23;
  repeated string roles = 24;
  repeated string permissions = 25;
}

// Revoke permission from user
message RevokePermissionsFromUserRequest{
  string id = 1;
  repeated string permissions = 2;
}

message RevokePermissionsFromUserReturn {
  string message = 1;
}

// Revoke role from user
message RevokeRolesFromUserRequest{
  string id = 1;
  repeated string roles = 2;
}

message RevokeRolesFromUserReturn {
  string message = 1;
}

// Get a user's permissions
message GetUserPermissionsRequest{
  string id = 1;
}

message GetUserPermissionsReturn {
  repeated PermissionMap permissions = 1;
}

// Get a user's roles
message GetUserRolesRequest{
  string id = 1;
}

message GetUserRolesReturn {
  repeated RoleMap roles = 1;
}

// Check if the user has permissions
message UserHasPermissionsRequest{
  string id = 1;
  repeated string permissions = 2;
}

message UserHasPermissionsReturn {
  string message = 1;
}

// Assign permission to user
message AssignPermissionsToUserRequest{
  string id = 1;
  repeated string permissions = 2;
}

message AssignPermissionsToUserReturn {
  string message = 1;
}

// Assign roles to user
message AssignRolesToUserRequest{
  string id = 1;
  repeated string roles = 2;
}

message AssignRolesToUserReturn {
  string message = 1;
}

// Assign permission to role
message AssignPermissionsToRoleRequest{
  string id = 1;
  repeated string permissions = 2;
}

message AssignPermissionsToRoleReturn {
  string message = 1;
}

// Get permissions
message GetPermissionsRequest {
}

message GetPermissionsReturn {
  repeated PermissionMap permissions = 1;
}

message PermissionMap {
  string id = 1;
  string name = 2;
  string description = 3;
}

// Delete permission
message DeletePermissionRequest {
  string id = 1;
}

message DeletePermissionReturn {
  string message = 1;
}

// Update permission
message UpdatePermissionRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
}

message UpdatePermissionReturn {
  string message = 1;
}

// Create permission
message CreatePermissionRequest {
  string name = 1;
  optional string description = 2;
}

message CreatePermissionReturn {
  string message = 1;
}

// Get roles
message GetRolesRequest {
}

message GetRolesReturn {
  repeated RoleMap roles = 1;
}

message RoleMap {
  string id = 1;
  string name = 2;
  string description = 3;
}

// Delete role
message DeleteRoleRequest {
  string id = 1;
}

message DeleteRoleReturn {
  string message = 1;
}

// Update role
message UpdateRoleRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
}

message UpdateRoleReturn {
  string message = 1;
}

// Create role
message CreateRoleRequest {
  string name = 1;
  optional string description = 2;
}

message CreateRoleReturn {
  string message = 1;
}

// Delete user
message DeleteUserRequest {
  string id = 1;
}

message DeleteUserReturn {
  string message = 1;
}

// Update user
message UpdateUserRequest {
  string id = 1;
  optional string name = 2;
  optional string email = 3;
  optional string email_verified_at = 4;
  optional string password = 5;
  optional int32 plan = 6;
  optional string plan_expire_date = 7;
  optional int32 requested_plan = 8;
  optional string type = 9;
  optional string avatar = 10;
  optional string lang = 11;
  optional string mode = 12;
  optional int32 created_by = 13;
  optional int32 default_pipeline = 14;
  optional int32 delete_status = 15;
  optional bool is_active = 16;
  optional string remember_token = 17;
  optional string last_login_at = 18;
  optional string created_at = 19;
  optional string updated_at = 20;
  optional int32 active_status = 21;
  optional int32 dark_mode = 22;
  optional string messenger_color = 23;
}

message UpdateUserReturn {
  string message = 1;
}

// Store user
message StoreUserRequest {
  optional string name = 1;
  string email = 2;
  optional string email_verified_at = 3;
  optional string password = 4;
  optional int32 plan = 5;
  optional string plan_expire_date = 6;
  optional int32 requested_plan = 7;
  optional string type = 8;
  optional string avatar = 9;
  optional string lang = 10;
  optional string mode = 11;
  optional int32 created_by = 12;
  optional int32 default_pipeline = 13;
  optional int32 delete_status = 14;
  optional bool is_active = 15;
  optional string remember_token = 16;
  optional string last_login_at = 17;
  optional string created_at = 18;
  optional string updated_at = 19;
  optional int32 active_status = 20;
  optional int32 dark_mode = 21;
  optional string messenger_color = 22;
}

message StoreUserReturn {
  string message = 1;
}